/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package payrollgui.payrollgui;

/**
 *
 * @author SCHOOL
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class PayrollGUI extends JFrame {

    private JTextField empNumField, hoursWorkedField;
    private JTextArea resultArea;

    // Data Arrays
    private final int[] employeeNumbers = {10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010,
            10011, 10012, 10013, 10014, 10015, 10016, 10017, 10018, 10019, 10020,
            10021, 10022, 10023, 10024, 10025, 10026, 10027, 10028, 10029, 10030,
            10031, 10032, 10033, 10034};

    private final String[] firstNames = {"Manuel III", "Antonio", "Bianca Sofia", "Isabella", "Eduard", "Andrea Mae",
            "Brad", "Alice", "Rosie", "Roderick", "Anthony", "Josie", "Martha", "Leila",
            "Fredrick", "Christian", "Selena", "Allison", "Cydney", "Mark", "Darlene",
            "Kolby", "Vella", "Tomas", "Jacklyn", "Percival", "Garfield", "Lizeth",
            "Carol", "Emelia", "Delia", "John Rafael", "Carlos Ian", "Beatriz"};

    private final String[] lastNames = {"Garcia", "Lim", "Aquino", "Reyes", "Hernandez", "Villanueva", "San Jose",
            "Romualdez", "Atienza", "Alvaro", "Salcedo", "Lopez", "Farala", "Martinez",
            "Romualdez", "Mata", "De Leon", "San Jose", "Rosario", "Bautista", "Lazaro",
            "Delos Santos", "Santos", "Del Rosario", "Tolentino", "Gutierrez", "Manalaysay",
            "Villegas", "Ramos", "Maceda", "Aguilar", "Castro", "Martinez", "Santos"};

    private final String[] status = {"Regular", "Regular", "Regular", "Regular", "Regular", "Regular", "Regular",
            "Regular", "Regular", "Regular", "Regular", "Regular", "Regular", "Regular",
            "Regular", "Regular", "Regular", "Regular", "Regular", "Regular",
            "Probationary", "Probationary", "Probationary", "Probationary", "Probationary",
            "Probationary", "Probationary", "Probationary", "Probationary", "Probationary",
            "Probationary", "Regular", "Regular", "Regular"};

    private final String[] position = {"Chief Executive Officer", "Chief Operating Officer", "Chief Finance Officer",
            "Chief Marketing Officer", "IT Operations and Systems", "HR Manager",
            "HR Team Leader", "HR Rank and File", "HR Rank and File", "Accounting Head",
            "Payroll Manager", "Payroll Team Leader", "Payroll Rank and File", "Payroll Rank and File",
            "Account Manager", "Account Team Leader", "Account Team Leader", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Sales & Marketing", "Supply Chain and Logistics", "Customer Service and Relations"};

    private final String[] basicSalaries = {"90000", "60000", "60000", "60000", "52670", "52670", "42975", "22500", "22500",
            "52670", "50825", "38475", "24000", "24000", "53500", "42975", "41850", "22500",
            "22500", "23250", "23250", "24000", "22500", "22500", "24000", "24750", "24750",
            "24000", "22500", "22500", "22500", "52670", "52670", "52670"};

    public PayrollGUI() {
        setTitle("Payroll Calculator");
        setSize(550, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(new Color(245, 250, 255));
        GridBagConstraints gbc = new GridBagConstraints();

        JLabel empNumLabel = new JLabel("Employee Number:");
        empNumField = new JTextField(15);

        JLabel hoursLabel = new JLabel("Hours Worked:");
        hoursWorkedField = new JTextField(15);

        JButton calcButton = new JButton("Calculate");
        JButton clearButton = new JButton("Clear");
        JButton exitButton = new JButton("Exit");

        resultArea = new JTextArea(20, 40);
        resultArea.setEditable(false);
        resultArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane scroll = new JScrollPane(resultArea);

        gbc.insets = new Insets(10, 10, 10, 10);

        gbc.gridx = 0; gbc.gridy = 0; panel.add(empNumLabel, gbc);
        gbc.gridx = 1; panel.add(empNumField, gbc);

        gbc.gridx = 0; gbc.gridy = 1; panel.add(hoursLabel, gbc);
        gbc.gridx = 1; panel.add(hoursWorkedField, gbc);

        gbc.gridx = 0; gbc.gridy = 2; panel.add(calcButton, gbc);
        gbc.gridx = 1; panel.add(clearButton, gbc);

        gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2;
        panel.add(exitButton, gbc);

        gbc.gridy = 4;
        panel.add(scroll, gbc);

        add(panel);

        calcButton.addActionListener(e -> calculatePayroll());
        clearButton.addActionListener(e -> {
            empNumField.setText("");
            hoursWorkedField.setText("");
            resultArea.setText("");
        });
        exitButton.addActionListener(e -> System.exit(0));
    }

    private void calculatePayroll() {
        try {
            int empNum = Integer.parseInt(empNumField.getText().trim());
            double hours = Double.parseDouble(hoursWorkedField.getText().trim());

            int index = -1;
            for (int i = 0; i < employeeNumbers.length; i++) {
                if (employeeNumbers[i] == empNum) {
                    index = i;
                    break;
                }
            }

            if (index == -1) {
                resultArea.setText("Employee number not found.");
                return;
            }

            double basicSalary = Double.parseDouble(basicSalaries[index]);
            double hourlyRate = basicSalary / 160;
            double totalEarnings = hours * hourlyRate;

            double sss = calculateSSS(basicSalary);
            double philHealth = calculatePhilHealth(basicSalary);
            double pagIbig = calculatePagIbig(basicSalary);
            double withholdingTax = calculateWithholdingTax(totalEarnings);

            double salaryDeductions = sss + philHealth + pagIbig;
            double netIncome = (totalEarnings - salaryDeductions) - withholdingTax;

            resultArea.setText(String.format("""
                    --- Employee Details ---
                    Employee #: %d
                    Name: %s %s
                    Position: %s
                    Status: %s

                    Basic Salary: %.2f Php
                    Hourly Rate: %.2f Php
                    Hours Worked: %.2f hrs
                    Total Earnings: %.2f Php

                    Deductions:
                    - SSS: %.2f Php
                    - PhilHealth: %.2f Php
                    - Pag-IBIG: %.2f Php
                    - Withholding Tax: %.2f Php

                    Total Deductions: %.2f Php
                    Net Income: %.2f Php
                    """,
                    employeeNumbers[index],
                    firstNames[index], lastNames[index],
                    position[index],
                    status[index],
                    basicSalary,
                    hourlyRate,
                    hours,
                    totalEarnings,
                    sss, philHealth, pagIbig, withholdingTax,
                    salaryDeductions,
                    netIncome
            ));

        } catch (NumberFormatException e) {
            resultArea.setText("Please enter valid numbers.");
        }
    }

    // Deductions
    private double calculateSSS(double salary) {
        if (salary >= 22250 && salary < 22750) return 1012.50;
        if (salary >= 22750 && salary < 23250) return 1035.00;
        if (salary >= 23250 && salary < 23750) return 1057.50;
        if (salary >= 23750 && salary < 24250) return 1080.00;
        if (salary >= 24250 && salary < 24750) return 1102.50;
        if (salary >= 24750) return 1125.00;
        return 0.0;
    }

    private double calculatePhilHealth(double salary) {
        if (salary >= 10000.01) return salary * 0.03;
        return 0.0;
    }

    private double calculatePagIbig(double salary) {
        double deduction = salary * 0.02;
        return (deduction > 100) ? 100 : deduction;
    }

    private double calculateWithholdingTax(double totalEarnings) {
        if (totalEarnings >= 20833 && totalEarnings < 33333) return (totalEarnings - 20833) * 0.20;
        if (totalEarnings >= 33333 && totalEarnings < 66667) return 2500 + (totalEarnings - 33333) * 0.25;
        if (totalEarnings >= 66667 && totalEarnings < 166667) return 10833 + (totalEarnings - 66667) * 0.30;
        if (totalEarnings >= 166667 && totalEarnings < 666667) return 40833.33 + (totalEarnings - 166667) * 0.32;
        if (totalEarnings >= 666667) return 200833.33 + (totalEarnings - 666667) * 0.35;
        return 0.0;
    }
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new PayrollGUI().setVisible(true));
    }
}
